let currentCurrency = 'rub'; // 'usd' or 'rub'
let currentLanguage = 'ru'; // 'ru' or 'en'
let currentDiscountLevel = 'base'; // 'base', 'level1', 'level2', 'oneLesson'

let lessonPackages = {}; // –Ø–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—è–≤–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç –∏ —è–∑—ã–∫–æ–≤
const minCosts = {
    rub: {
        ru: 1300,
        en: 1900
    },
    usd: {
        ru: 20,
        en: 25
    },
    eur: {
        ru: 18,
        en: 22
    }
};

// –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const currencySymbols = {
    rub: '—Ä—É–±–ª–µ–π',
    usd: '–¥–æ–ª–ª–∞—Ä–æ–≤',
    eur: '–µ–≤—Ä–æ'
};

function loadLessonPackages() {
    if (!lessonPackagesConfig[currentCurrency] || !lessonPackagesConfig[currentCurrency][currentLanguage]) {
        console.error(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª—é—Ç—ã "${currentCurrency}" –∏ —è–∑—ã–∫–∞ "${currentLanguage}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    }
    return lessonPackagesConfig[currentCurrency][currentLanguage][currentDiscountLevel];
}

document.addEventListener('DOMContentLoaded', function() {
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

function changeCurrency(currency) {
    currentCurrency = currency;
    updateButtonGroup('currency', currency);
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã
}

function changeLanguage(language) {
    currentLanguage = language;
    updateButtonGroup('language', language);
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
}

function changeDiscountLevel(level) {
    currentDiscountLevel = level;
    updateButtonGroup('discount', level);
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–∫–∏–¥–æ–∫
}

function updateButtonGroup(group, selectedValue) {
    const buttons = document.querySelectorAll(`.button-group button[id^='${group}']`);
    buttons.forEach(button => {
        if (button.id === `${group}-${selectedValue}`) {
            button.classList.add('active');
        } else {
            button.classList.remove('active');
        }
    });
}

function populateTable() {
    const tableBody = document.getElementById('lessonPackagesTable');
    tableBody.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã

    if (!lessonPackages || Object.keys(lessonPackages).length === 0) {
        console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
        tableBody.innerHTML = '<tr><td colspan="6">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }

    Object.keys(lessonPackages).forEach(key => {
        const packageData = lessonPackages[key];
        const costFormatted = packageData.cost ? formatCurrency(packageData.cost) : '‚Äî';
        const costPerLessonFormatted = packageData.cost ? formatCurrency(Math.ceil(packageData.cost / key)) : '‚Äî';

        const row = document.createElement('tr');
        row.innerHTML = `
            <td><input type="checkbox" class="lessonPackageCheckbox" data-package="${key}" ${packageData.selected ? 'checked' : ''} onchange="generateMessage()"></td>
            <td>${key} ${getLessonWord(key)} <button class="copy-button" onclick="copyLink('${key}')">üîó</button></td>
            <td>${costFormatted}</td>
            <td>${costPerLessonFormatted}</td>
            <td><input type="number" class="bonusLessonsInput" data-package="${key}" value="${packageData.bonusLessons || 0}" min="0" onchange="updateCosts(); generateMessage()"></td>
            <td class="costWithBonuses" data-package="${key}"></td>
        `;
        tableBody.appendChild(row);
    });
    updateCosts(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
}

function updateCosts() {
    const rows = document.querySelectorAll('#lessonPackagesTable tr');
    const minCost = minCosts[currentCurrency][currentLanguage]; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã –∏ —è–∑—ã–∫–∞

    rows.forEach(row => {
        const packageCount = parseInt(row.querySelector('.lessonPackageCheckbox').dataset.package, 10);
        const bonusLessons = parseInt(row.querySelector('.bonusLessonsInput').value, 10);
        const totalLessons = packageCount + bonusLessons;
        const totalCost = lessonPackages[packageCount] ? lessonPackages[packageCount].cost : null;
        const costWithBonuses = totalCost ? Math.ceil(totalCost / totalLessons) : 0;
        const costCell = row.querySelector('.costWithBonuses');
        costCell.textContent = formatCurrency(costWithBonuses);

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —É—Ä–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
        if (costWithBonuses < minCost) {
            costCell.classList.add('warning');
            costCell.title = `–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —É—Ä–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (${formatCurrency(minCost)})!`;
        } else {
            costCell.classList.remove('warning');
            costCell.title = "";
        }
    });
}

function copyLink(packageCount) {
    const link = lessonPackages[packageCount].link;
    navigator.clipboard.writeText(link)
        .then(() => showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success'))
        .catch(err => showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏', 'error'));
}

function formatCurrency(value) {
    if (value === null || value === undefined) return '‚Äî';
    return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—É—Ä–æ–∫"
function getLessonWord(number) {
    if (number === 1 || (number % 10 === 1 && number % 100 !== 11)) return '—É—Ä–æ–∫';
    if ([2, 3, 4].includes(number % 10) && ![12, 13, 14].includes(number % 100)) return '—É—Ä–æ–∫–∞';
    return '—É—Ä–æ–∫–æ–≤';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–±–æ–Ω—É—Å–Ω—ã–π"
function getBonusWord(number) {
    if (number === 1 || (number % 10 === 1 && number % 100 !== 11)) return '–±–æ–Ω—É—Å–Ω—ã–π';
    if ([2, 3, 4].includes(number % 10) && ![12, 13, 14].includes(number % 100)) return '–±–æ–Ω—É—Å–Ω—ã—Ö';
    return '–±–æ–Ω—É—Å–Ω—ã—Ö';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—Ä—É–±–ª—å" –∏ "–¥–æ–ª–ª–∞—Ä"
function getCurrencyWord(number, currency) {
    if (currency === '—Ä—É–±–ª–µ–π') {
        if (number === 1 || (number % 10 === 1 && number % 100 !== 11)) return '—Ä—É–±–ª—å';
        if ([2, 3, 4].includes(number % 10) && ![12, 13, 14].includes(number % 100)) return '—Ä—É–±–ª—è';
        return '—Ä—É–±–ª–µ–π';
    } else if (currency === '–¥–æ–ª–ª–∞—Ä–æ–≤') {
        if (number === 1 || (number % 10 === 1 && number % 100 !== 11)) return '–¥–æ–ª–ª–∞—Ä';
        if ([2, 3, 4].includes(number % 10) && ![12, 13, 14].includes(number % 100)) return '–¥–æ–ª–ª–∞—Ä–∞';
        return '–¥–æ–ª–ª–∞—Ä–æ–≤';
    } else if (currency === '–µ–≤—Ä–æ') {
        return '–µ–≤—Ä–æ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã +3 –¥–Ω—è
function getFutureDate(daysToAdd) {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + daysToAdd);
    const day = currentDate.getDate().toString().padStart(2, '0');
    const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
    const year = currentDate.getFullYear();
    return `${day}.${month}.${year}`;
}



function generateMessage() {
    const selectedPackages = [];
    const rows = document.querySelectorAll('#lessonPackagesTable tr');
    const currencyLabel = currencySymbols[currentCurrency]; // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞

    rows.forEach(row => {
        const checkbox = row.querySelector('.lessonPackageCheckbox');
        const packageCount = parseInt(checkbox.dataset.package, 10); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ
        const isChecked = checkbox.checked;
        const bonusLessons = parseInt(row.querySelector('.bonusLessonsInput').value, 10); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        const totalLessons = packageCount + bonusLessons; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ —Å –±–æ–Ω—É—Å–∞–º–∏
        const totalCost = lessonPackages[packageCount] ? lessonPackages[packageCount].cost : null; // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
        const costWithBonuses = totalCost ? (totalCost / totalLessons).toFixed(0) : 0; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —É—Ä–æ–∫ —Å –±–æ–Ω—É—Å–∞–º–∏
        const link = lessonPackages[packageCount] ? lessonPackages[packageCount].link : '';

        if (isChecked && totalCost) {
            selectedPackages.push({
                lessons: totalLessons,
                cost: totalCost,
                package: packageCount,
                bonus: bonusLessons,
                costPerLesson: costWithBonuses,
                link: link
            });
        }
    });

    if (selectedPackages.length === 0) {
        return;
    }

    let message = '–¶–µ–Ω—ã –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ —Å —É—á–∏—Ç–µ–ª–µ–º:\n\n';
    selectedPackages.forEach(pkg => {
        const lessonWord = getLessonWord(pkg.package); // –°–∫–ª–æ–Ω—è–µ–º "—É—Ä–æ–∫" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const bonusWord = getBonusWord(pkg.bonus); // –°–∫–ª–æ–Ω—è–µ–º "–±–æ–Ω—É—Å–Ω—ã–π"
        const currencyWord = getCurrencyWord(pkg.cost, currencyLabel); // –°–∫–ª–æ–Ω—è–µ–º –≤–∞–ª—é—Ç—É
        const months = Math.floor(pkg.lessons / 4); // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ (–æ–∫—Ä—É–≥–ª—è–µ–º –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É)
        const monthWord = getMonthWord(months); // –°–∫–ª–æ–Ω—è–µ–º "–º–µ—Å—è—Ü"

        if (pkg.bonus > 0) {
            message += `üìö ${pkg.package} ${lessonWord} + ${pkg.bonus} ${bonusWord} ${getLessonWord(pkg.bonus)} - ${formatCurrency(pkg.cost)} ${currencyWord}\n${months} ${monthWord} –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–∏ 1 —É—Ä–æ–∫–µ –≤ –Ω–µ–¥–µ–ª—é.\n${pkg.link}\n\n`;
        } else {
            message += `üìö ${pkg.package} ${lessonWord} - ${formatCurrency(pkg.cost)} ${currencyWord}\n${months} ${monthWord} –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–∏ 1 —É—Ä–æ–∫–µ –≤ –Ω–µ–¥–µ–ª—é.\n${pkg.link}\n\n`;
        }
    });

    message += `üéâ *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ ${getFutureDate(1)}*`;

    const generatedMessageTextarea = document.getElementById('generatedMessage');
    generatedMessageTextarea.value = message;
    autoResize(generatedMessageTextarea); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–º–µ—Å—è—Ü"
function getMonthWord(number) {
    if (number === 1) return '–º–µ—Å—è—Ü';
    if (number >= 2 && number <= 4) return '–º–µ—Å—è—Ü–∞';
    return '–º–µ—Å—è—Ü–µ–≤';
}





function autoResize(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = (textarea.scrollHeight) + 'px';
}

function copyMessage() {
    const generatedMessageTextarea = document.getElementById('generatedMessage');
    const text = generatedMessageTextarea.value;
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text)
            .then(() => showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success'))
            .catch(() => {
                generatedMessageTextarea.select();
                document.execCommand('copy');
                showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success');
            });
    } else {
        generatedMessageTextarea.select();
        document.execCommand('copy');
        showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success');
    }
}

function showToast(message, type = 'success') {
    const container = document.getElementById('toast-container');
    if (!container) return;
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    container.appendChild(toast);
    // –º–∞–ª–æ–µ —Ç–∞–π–º–∏–Ω–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => toast.classList.add('show'));
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 200);
    }, 2200);
}
