let currentCurrency = 'rub'; // 'rub', 'usd', 'eur'
let currentLanguage = 'ru'; // 'ru' or 'en'
let currentDiscountLevel = 'base'; // 'base', 'level1', 'level2', 'oneLesson'

let lessonPackages = {}; // –Ø–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—è–≤–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
let noBonusesMode = false; // –±—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä "–±–µ–∑ –±–æ–Ω—É—Å–æ–≤"

function loadLessonPackages() {
    return window.Data.loadLessonPackages(currentCurrency, currentLanguage, currentDiscountLevel);
}

document.addEventListener('DOMContentLoaded', function() {
    initTheme();
    // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä noBonuses –∏–∑ localStorage
    const savedNoBonus = localStorage.getItem('noBonusesMode');
    if (savedNoBonus === 'true') {
        noBonusesMode = true;
        const on = document.getElementById('nobonus-on');
        const off = document.getElementById('nobonus-off');
        if (on && off) { on.classList.add('active'); off.classList.remove('active'); }
        document.documentElement.classList.add('no-bonuses');
    }
    lessonPackages = loadLessonPackages();
    populateTable();
    attachTableHandlers();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const themeBtn = document.getElementById('theme-toggle');
    if (themeBtn) themeBtn.addEventListener('click', toggleTheme);
});

function changeCurrency(currency) {
    currentCurrency = currency;
    updateButtonGroup('currency', currency);
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã
}

function changeLanguage(language) {
    currentLanguage = language;
    updateButtonGroup('language', language);
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
}

function changeDiscountLevel(level) {
    currentDiscountLevel = level;
    updateButtonGroup('discount', level);
    lessonPackages = loadLessonPackages();
    populateTable();
    updateCosts();
    generateMessage(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–∫–∏–¥–æ–∫
}
function attachTableHandlers() {
    const tbody = document.getElementById('lessonPackagesTable');
    if (!tbody) return;
    tbody.addEventListener('click', (e) => {
        const target = e.target;
        if (target.classList.contains('copy-button')) {
            const pkg = Number(target.dataset.package);
            if (lessonPackages[pkg] && lessonPackages[pkg].link) copyLink(pkg);
        }
        if (target.classList.contains('lessonPackageCheckbox')) {
            generateMessage();
        }
    });
    tbody.addEventListener('input', (e) => {
        const target = e.target;
        if (target.classList.contains('bonusLessonsInput')) {
            updateCosts();
            generateMessage();
        }
    });
}

function initTheme() {
    const saved = localStorage.getItem('theme');
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const theme = saved ? saved : (prefersDark ? 'dark' : 'light');
    document.documentElement.setAttribute('data-theme', theme === 'light' ? 'light' : 'dark');
    const btn = document.getElementById('theme-toggle');
    if (btn) btn.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
}

function toggleTheme() {
    const current = document.documentElement.getAttribute('data-theme');
    const next = current === 'light' ? 'dark' : 'light';
    document.documentElement.setAttribute('data-theme', next);
    localStorage.setItem('theme', next);
    const btn = document.getElementById('theme-toggle');
    if (btn) btn.textContent = next === 'light' ? 'üåô' : '‚òÄÔ∏è';
}

function updateButtonGroup(group, selectedValue) {
    const buttons = document.querySelectorAll(`.button-group button[id^='${group}']`);
    buttons.forEach(button => {
        if (button.id === `${group}-${selectedValue}`) {
            button.classList.add('active');
        } else {
            button.classList.remove('active');
        }
    });
}

function setNoBonuses(flag) {
    noBonusesMode = Boolean(flag);
    // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
    const on = document.getElementById('nobonus-on');
    const off = document.getElementById('nobonus-off');
    if (on && off) {
        if (noBonusesMode) {
            on.classList.add('active');
            off.classList.remove('active');
            document.documentElement.classList.add('no-bonuses');
        } else {
            off.classList.add('active');
            on.classList.remove('active');
            document.documentElement.classList.remove('no-bonuses');
        }
    }
    localStorage.setItem('noBonusesMode', String(noBonusesMode));
    updateCosts();
    generateMessage();
}

function populateTable() {
    const tableBody = document.getElementById('lessonPackagesTable');
    tableBody.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã

    if (!lessonPackages || Object.keys(lessonPackages).length === 0) {
        console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
        tableBody.innerHTML = '<tr><td colspan="6">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }

    Object.keys(lessonPackages).forEach(key => {
        const pkgCount = Number(key);
        const packageData = lessonPackages[key];

        const tr = document.createElement('tr');

        const tdSelect = document.createElement('td');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'lessonPackageCheckbox';
        checkbox.dataset.package = String(pkgCount);
        checkbox.checked = Boolean(packageData.selected);
        tdSelect.appendChild(checkbox);

        const tdName = document.createElement('td');
        tdName.appendChild(document.createTextNode(`${pkgCount} ${window.Format.getLessonWord(pkgCount)} `));
        const linkBtn = document.createElement('button');
        linkBtn.className = 'copy-button';
        linkBtn.textContent = 'üîó';
        linkBtn.dataset.package = String(pkgCount);
        tdName.appendChild(linkBtn);

        const tdTotal = document.createElement('td');
        tdTotal.textContent = packageData.cost ? window.Format.formatSpaced(packageData.cost) : '‚Äî';

        const tdPerLesson = document.createElement('td');
        const per = (packageData.cost && pkgCount) ? Math.ceil(Number(packageData.cost) / pkgCount) : null;
        tdPerLesson.textContent = per !== null ? window.Format.formatSpaced(per) : '‚Äî';

        const tdBonus = document.createElement('td');
        const bonusInput = document.createElement('input');
        bonusInput.type = 'number';
        bonusInput.min = '0';
        bonusInput.className = 'bonusLessonsInput';
        bonusInput.dataset.package = String(pkgCount);
        bonusInput.value = String(Number(packageData.bonusLessons || 0));
        tdBonus.appendChild(bonusInput);

        const tdCostWithBonus = document.createElement('td');
        tdCostWithBonus.className = 'costWithBonuses';
        tdCostWithBonus.dataset.package = String(pkgCount);

        tr.appendChild(tdSelect);
        tr.appendChild(tdName);
        tr.appendChild(tdTotal);
        tr.appendChild(tdPerLesson);
        tr.appendChild(tdBonus);
        tr.appendChild(tdCostWithBonus);

        tableBody.appendChild(tr);
    });
    updateCosts(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
}

function updateCosts() {
    const rows = document.querySelectorAll('#lessonPackagesTable tr');
    const minCost = window.Data.getMinCost(currentCurrency, currentLanguage); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã –∏ —è–∑—ã–∫–∞

    rows.forEach(row => {
        const pkgEl = row.querySelector('.lessonPackageCheckbox');
        const bonusEl = row.querySelector('.bonusLessonsInput');
        if (!pkgEl || !bonusEl) return;
        const packageCount = Number(pkgEl.dataset.package);
        let bonusLessons = noBonusesMode ? 0 : Number(bonusEl.value);
        if (!Number.isFinite(bonusLessons) || bonusLessons < 0) bonusLessons = 0;
        const totalCost = lessonPackages[packageCount] ? Number(lessonPackages[packageCount].cost) : NaN;
        const totalLessons = packageCount + bonusLessons;
        const costCell = row.querySelector('.costWithBonuses');
        if (!Number.isFinite(totalCost) || !Number.isFinite(totalLessons) || totalLessons <= 0) {
            costCell.textContent = '‚Äî';
            costCell.classList.remove('warning');
            costCell.title = '';
            return;
        }
        const costWithBonuses = Math.ceil(totalCost / totalLessons);
        costCell.textContent = window.Format.formatSpaced(costWithBonuses);
        if (Number.isFinite(minCost) && costWithBonuses < minCost) {
            costCell.classList.add('warning');
            costCell.title = `–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —É—Ä–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (${window.Format.formatSpaced(minCost)})!`;
        } else {
            costCell.classList.remove('warning');
            costCell.title = '';
        }
    });
}

function copyLink(packageCount) {
    const link = lessonPackages[packageCount].link;
    navigator.clipboard.writeText(link)
        .then(() => showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success'))
        .catch(err => showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏', 'error'));
}

function formatCurrency(value) {
    return window.Format.formatSpaced(value);
}

// –°–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Format

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã +3 –¥–Ω—è
function getFutureDate(daysToAdd) {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + daysToAdd);
    const day = currentDate.getDate().toString().padStart(2, '0');
    const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
    const year = currentDate.getFullYear();
    return `${day}.${month}.${year}`;
}



function generateMessage() {
    const selectedPackages = [];
    const rows = document.querySelectorAll('#lessonPackagesTable tr');
    const meta = window.Data.getCurrencyMeta(currentCurrency) || { label: '' };
    const currencyLabel = meta.label; // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞

    rows.forEach(row => {
        const checkbox = row.querySelector('.lessonPackageCheckbox');
        const packageCount = parseInt(checkbox.dataset.package, 10); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ
        const isChecked = checkbox.checked;
        const bonusLessons = noBonusesMode ? 0 : parseInt(row.querySelector('.bonusLessonsInput').value, 10); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        const totalLessons = packageCount + (noBonusesMode ? 0 : bonusLessons); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ —Å –±–æ–Ω—É—Å–∞–º–∏
        const totalCost = lessonPackages[packageCount] ? lessonPackages[packageCount].cost : null; // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
        const costWithBonuses = totalCost ? (totalCost / totalLessons).toFixed(0) : 0; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —É—Ä–æ–∫ —Å –±–æ–Ω—É—Å–∞–º–∏
        const link = lessonPackages[packageCount] ? lessonPackages[packageCount].link : '';

        if (isChecked && totalCost) {
            selectedPackages.push({
                lessons: totalLessons,
                cost: totalCost,
                package: packageCount,
                bonus: bonusLessons,
                costPerLesson: costWithBonuses,
                link: link
            });
        }
    });

    if (selectedPackages.length === 0) {
        return;
    }

    let message = '–¶–µ–Ω—ã –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ —Å —É—á–∏—Ç–µ–ª–µ–º:\n\n';
    selectedPackages.forEach(pkg => {
        const lessonWord = window.Format.getLessonWord(pkg.package);
        const bonusWord = window.Format.getBonusWord(pkg.bonus);
        const currencyWord = window.Format.getCurrencyWord(pkg.cost, currencyLabel);
        const months = Math.floor(pkg.lessons / 4); // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ (–æ–∫—Ä—É–≥–ª—è–µ–º –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É)
        const monthWord = window.Format.getMonthWord(months);

        if (!noBonusesMode && pkg.bonus > 0) {
            message += `üìö ${pkg.package} ${lessonWord} + ${pkg.bonus} ${bonusWord} ${window.Format.getLessonWord(pkg.bonus)} - ${formatCurrency(pkg.cost)} ${currencyWord}\n${months} ${monthWord} –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–∏ 1 —É—Ä–æ–∫–µ –≤ –Ω–µ–¥–µ–ª—é.\n${pkg.link}\n\n`;
        } else {
            message += `üìö ${pkg.package} ${lessonWord} - ${formatCurrency(pkg.cost)} ${currencyWord}\n${months} ${monthWord} –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–∏ 1 —É—Ä–æ–∫–µ –≤ –Ω–µ–¥–µ–ª—é.\n${pkg.link}\n\n`;
        }
    });

    message += `üéâ *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ ${getFutureDate(1)}*`;

    const generatedMessageTextarea = document.getElementById('generatedMessage');
    generatedMessageTextarea.value = message;
    autoResize(generatedMessageTextarea); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–º–µ—Å—è—Ü"
function getMonthWord(number) {
    if (number === 1) return '–º–µ—Å—è—Ü';
    if (number >= 2 && number <= 4) return '–º–µ—Å—è—Ü–∞';
    return '–º–µ—Å—è—Ü–µ–≤';
}





function autoResize(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = (textarea.scrollHeight) + 'px';
}

function copyMessage() {
    const generatedMessageTextarea = document.getElementById('generatedMessage');
    const text = generatedMessageTextarea.value;
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text)
            .then(() => showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success'))
            .catch(() => {
                generatedMessageTextarea.select();
                document.execCommand('copy');
                showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success');
            });
    } else {
        generatedMessageTextarea.select();
        document.execCommand('copy');
        showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success');
    }
}

function showToast(message, type = 'success') {
    const container = document.getElementById('toast-container');
    if (!container) return;
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    container.appendChild(toast);
    // –º–∞–ª–æ–µ —Ç–∞–π–º–∏–Ω–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => toast.classList.add('show'));
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 200);
    }, 2200);
}
